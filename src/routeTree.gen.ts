/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as DashboardUsersIndexImport } from './routes/dashboard/users/index'
import { Route as DashboardPostsIndexImport } from './routes/dashboard/posts/index'
import { Route as authSignupIndexImport } from './routes/(auth)/signup/index'
import { Route as authSigninIndexImport } from './routes/(auth)/signin/index'
import { Route as DemoStartServerFuncsImport } from './routes/demo.start.server-funcs'
import { Route as DashboardUsersUserIdImport } from './routes/dashboard/users/$userId'
import { Route as DashboardPostsPostIdImport } from './routes/dashboard/posts/$postId'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUsersIndexRoute = DashboardUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardPostsIndexRoute = DashboardPostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const authSignupIndexRoute = authSignupIndexImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => authRouteRoute,
} as any)

const authSigninIndexRoute = authSigninIndexImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => authRouteRoute,
} as any)

const DemoStartServerFuncsRoute = DemoStartServerFuncsImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUsersUserIdRoute = DashboardUsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardPostsPostIdRoute = DashboardPostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/posts/$postId': {
      id: '/dashboard/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/dashboard/posts/$postId'
      preLoaderRoute: typeof DashboardPostsPostIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/users/$userId': {
      id: '/dashboard/users/$userId'
      path: '/users/$userId'
      fullPath: '/dashboard/users/$userId'
      preLoaderRoute: typeof DashboardUsersUserIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signin/': {
      id: '/(auth)/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninIndexImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/signup/': {
      id: '/(auth)/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupIndexImport
      parentRoute: typeof authRouteImport
    }
    '/dashboard/posts/': {
      id: '/dashboard/posts/'
      path: '/posts'
      fullPath: '/dashboard/posts'
      preLoaderRoute: typeof DashboardPostsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/users/': {
      id: '/dashboard/users/'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authSigninIndexRoute: typeof authSigninIndexRoute
  authSignupIndexRoute: typeof authSignupIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSigninIndexRoute: authSigninIndexRoute,
  authSignupIndexRoute: authSignupIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardPostsPostIdRoute: typeof DashboardPostsPostIdRoute
  DashboardUsersUserIdRoute: typeof DashboardUsersUserIdRoute
  DashboardPostsIndexRoute: typeof DashboardPostsIndexRoute
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardPostsPostIdRoute: DashboardPostsPostIdRoute,
  DashboardUsersUserIdRoute: DashboardUsersUserIdRoute,
  DashboardPostsIndexRoute: DashboardPostsIndexRoute,
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard/posts/$postId': typeof DashboardPostsPostIdRoute
  '/dashboard/users/$userId': typeof DashboardUsersUserIdRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/signin': typeof authSigninIndexRoute
  '/signup': typeof authSignupIndexRoute
  '/dashboard/posts': typeof DashboardPostsIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard/posts/$postId': typeof DashboardPostsPostIdRoute
  '/dashboard/users/$userId': typeof DashboardUsersUserIdRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/signin': typeof authSigninIndexRoute
  '/signup': typeof authSignupIndexRoute
  '/dashboard/posts': typeof DashboardPostsIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard/posts/$postId': typeof DashboardPostsPostIdRoute
  '/dashboard/users/$userId': typeof DashboardUsersUserIdRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/(auth)/signin/': typeof authSigninIndexRoute
  '/(auth)/signup/': typeof authSignupIndexRoute
  '/dashboard/posts/': typeof DashboardPostsIndexRoute
  '/dashboard/users/': typeof DashboardUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/demo/tanstack-query'
    | '/dashboard/posts/$postId'
    | '/dashboard/users/$userId'
    | '/demo/start/server-funcs'
    | '/signin'
    | '/signup'
    | '/dashboard/posts'
    | '/dashboard/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/demo/tanstack-query'
    | '/dashboard/posts/$postId'
    | '/dashboard/users/$userId'
    | '/demo/start/server-funcs'
    | '/signin'
    | '/signup'
    | '/dashboard/posts'
    | '/dashboard/users'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/dashboard'
    | '/demo/tanstack-query'
    | '/dashboard/posts/$postId'
    | '/dashboard/users/$userId'
    | '/demo/start/server-funcs'
    | '/(auth)/signin/'
    | '/(auth)/signup/'
    | '/dashboard/posts/'
    | '/dashboard/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/dashboard",
        "/demo/tanstack-query",
        "/demo/start/server-funcs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/signin/",
        "/(auth)/signup/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/posts/$postId",
        "/dashboard/users/$userId",
        "/dashboard/posts/",
        "/dashboard/users/"
      ]
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/dashboard/posts/$postId": {
      "filePath": "dashboard/posts/$postId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/users/$userId": {
      "filePath": "dashboard/users/$userId.tsx",
      "parent": "/dashboard"
    },
    "/demo/start/server-funcs": {
      "filePath": "demo.start.server-funcs.tsx"
    },
    "/(auth)/signin/": {
      "filePath": "(auth)/signin/index.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/signup/": {
      "filePath": "(auth)/signup/index.tsx",
      "parent": "/(auth)"
    },
    "/dashboard/posts/": {
      "filePath": "dashboard/posts/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/users/": {
      "filePath": "dashboard/users/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
